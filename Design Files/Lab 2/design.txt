-- Register Module

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity register_module is
    generic(
        n : integer := 4
    );
    port(
        clk : in std_logic;
        rst : in std_logic;
        we : in std_logic;
        din : in std_logic_vector(n-1 downto 0);
        dout : out std_logic_vector(n-1 downto 0)
    );
end register_module;
architecture Behavioral of register_module is

begin

    process(clk)
    begin
      if rst = '0' then 
        dout <=(others=>'0');
      elsif rising_edge(clk)then
        if we = '1' then
        dout<=din;
        end if;
        end if;
        end process;
end Behavioral;

-- 3 to 8 decoder

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity decoder_3to8 is
    port(
        en : in std_logic;
        din : in std_logic_vector(2 downto 0);
        dout: out std_logic_vector (7 downto 0)
        
       );
end decoder_3to8;
architecture dataflow of decoder_3to8 is
Signal Sel : STD_LOGIC_VECTOR(3 downto 0);
begin
    Sel <= en & din;
    With Sel Select
    dout   <=  "00000001" when "1000",
    "00000010" when "1001",
    "00000100" when "1010",
    "00001000" when "1011",
    "00010000" when "1100",
    "00100000" when "1101" ,
    "01000000" when "1110" ,
    "10000000" when "1111" ,
    "00000000" when others;
end dataflow;

-- Mux 8 to 1

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity mux_8to1 is
    generic(n :integer := 4);
    port (
        sel :in std_logic_vector(2 downto 0);
        din0: in std_logic_vector(n-1 downto 0);
        din1 : in std_logic_vector(n-1 downto 0);
        din2 : in std_logic_vector(n-1 downto 0);
        din3 : in std_logic_vector(n-1 downto 0);
        din4 : in std_logic_vector(n-1 downto 0);
        din5 : in std_logic_vector(n-1 downto 0);
        din6 : in std_logic_vector(n-1 downto 0);
        din7 : in std_logic_vector(n-1 downto 0);
        dout :out std_logic_vector(n-1 downto 0)
        
    );
end mux_8to1;

architecture dataflow of mux_8to1 is 

begin
    with sel select
    dout      <=
    din0 when "000",
    din1 when "001",
    din2 when "010",
    din3 when "011",
    din4 when "100",
    din5 when "101" ,
    din6 when "110" ,
    din7 when others;
    

end dataflow; 

-- Register File

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity register_file is
 port(
        clk : in std_logic;
        rst : in std_logic;
        we : in std_logic;
        addr : in std_logic_vector(2 downto 0);
        din : in std_logic_vector(3 downto 0);
        dout : out std_logic_vector(3 downto 0)

 
 );
end register_file;

architecture Structural of register_file is

component register_module is 
    generic(n :integer := 4);
    port(
        clk : in std_logic;
        rst : in std_logic;
        we : in std_logic;
        din : in std_logic_vector(n-1 downto 0);
        dout : out std_logic_vector(n-1 downto 0)
    );

end component;

component mux_8to1 is
    generic(n :integer := 4);
    port (
        sel :in std_logic_vector(2 downto 0);
        din0: in std_logic_vector(n-1 downto 0);
        din1 : in std_logic_vector(n-1 downto 0);
        din2 : in std_logic_vector(n-1 downto 0);
        din3 : in std_logic_vector(n-1 downto 0);
        din4 : in std_logic_vector(n-1 downto 0);
        din5 : in std_logic_vector(n-1 downto 0);
        din6 : in std_logic_vector(n-1 downto 0);
        din7 : in std_logic_vector(n-1 downto 0);
        dout :out std_logic_vector(n-1 downto 0)
        
    );
end component;


component decoder_3to8 is
    port (
        en   : in std_logic;
        din : in std_logic_vector(2 downto 0);
        dout : out std_logic_vector (7 downto 0)
    );
end component;

signal decoder_dout : std_logic_vector(7 downto 0);

type array_8of4 is array(0 to 7) of std_logic_vector(3 downto 0);
signal register_dout : array_8of4;

begin

    inst_decoder : decoder_3to8
    port map (
        en => we ,
        din => addr ,
        dout => decoder_dout
    );

    inst_mux : mux_8to1
    generic map (
        n => 4
    )
port map (
    sel => addr  ,
    din0 =>  register_dout(0) ,
    din1 =>  register_dout(1) ,
    din2 =>  register_dout(2) ,
    din3 =>  register_dout(3) ,
    din4 =>  register_dout(4) ,
    din5 =>  register_dout(5) ,
    din6 =>  register_dout(6) ,
    din7 =>  register_dout(7) ,
    dout => dout

);

register_module_generate : for i in 0 to 7 generate
    instantiate_register_module : register_module
    generic map (
      n => 4  
    )
    port map (
        clk =>  clk ,
        rst =>  rst ,
        we =>   decoder_dout(i) ,
        din =>  din ,
        dout =>  register_dout(i) 
    );
end generate;
end Structural;




